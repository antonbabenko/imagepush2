<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class ImagepushImagepushBundleDocumentImageHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data)
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (string) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['imageId'])) {
            $value = $data['imageId'];
            $return = (int) $value;
            $this->class->reflFields['imageId']->setValue($document, $return);
            $hydratedData['imageId'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['link'])) {
            $value = $data['link'];
            $return = (string) $value;
            $this->class->reflFields['link']->setValue($document, $return);
            $hydratedData['link'] = $return;
        }

        /** @Field(type="timestamp") */
        if (isset($data['timestamp'])) {
            $value = $data['timestamp'];
            $return = $value;
            $this->class->reflFields['timestamp']->setValue($document, $return);
            $hydratedData['timestamp'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['file'])) {
            $value = $data['file'];
            $return = (string) $value;
            $this->class->reflFields['file']->setValue($document, $return);
            $hydratedData['file'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title'])) {
            $value = $data['title'];
            $return = (string) $value;
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['slug'])) {
            $value = $data['slug'];
            $return = (string) $value;
            $this->class->reflFields['slug']->setValue($document, $return);
            $hydratedData['slug'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['sourceType'])) {
            $value = $data['sourceType'];
            $return = (string) $value;
            $this->class->reflFields['sourceType']->setValue($document, $return);
            $hydratedData['sourceType'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['sourceTags'])) {
            $value = $data['sourceTags'];
            $return = $value;
            $this->class->reflFields['sourceTags']->setValue($document, $return);
            $hydratedData['sourceTags'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['tags']) ? $data['tags'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork, '$');
        $return->setOwner($document, $this->class->fieldMappings['tags']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['tags']->setValue($document, $return);
        $hydratedData['tags'] = $return;

        /** @Field(type="boolean") */
        if (isset($data['isAvailable'])) {
            $value = $data['isAvailable'];
            $return = (bool) $value;
            $this->class->reflFields['isAvailable']->setValue($document, $return);
            $hydratedData['isAvailable'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['mWidth'])) {
            $value = $data['mWidth'];
            $return = (int) $value;
            $this->class->reflFields['mWidth']->setValue($document, $return);
            $hydratedData['mWidth'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['mHeight'])) {
            $value = $data['mHeight'];
            $return = (int) $value;
            $this->class->reflFields['mHeight']->setValue($document, $return);
            $hydratedData['mHeight'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['tWidth'])) {
            $value = $data['tWidth'];
            $return = (int) $value;
            $this->class->reflFields['tWidth']->setValue($document, $return);
            $hydratedData['tWidth'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['tHeight'])) {
            $value = $data['tHeight'];
            $return = (int) $value;
            $this->class->reflFields['tHeight']->setValue($document, $return);
            $hydratedData['tHeight'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['aWidth'])) {
            $value = $data['aWidth'];
            $return = (int) $value;
            $this->class->reflFields['aWidth']->setValue($document, $return);
            $hydratedData['aWidth'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['aHeight'])) {
            $value = $data['aHeight'];
            $return = (int) $value;
            $this->class->reflFields['aHeight']->setValue($document, $return);
            $hydratedData['aHeight'] = $return;
        }
        return $hydratedData;
    }
}