services:

    ##################
    # DynamoDB repository
    ##################
    imagepush.repository.image:
        class: Imagepush\ImagepushBundle\Repository\ImageRepository
        arguments: [@aws.dynamodb]
        calls:
            - [ setLogger, [@imagepush.db_logger]]

    imagepush.repository.tag:
        class: Imagepush\ImagepushBundle\Repository\TagRepository
        arguments: [@aws.dynamodb]
        calls:
            - [ setLogger, [@imagepush.db_logger]]

    imagepush.repository.latest_tag:
        class: Imagepush\ImagepushBundle\Repository\LatestTagRepository
        arguments: [@aws.dynamodb]
        calls:
            - [ setLogger, [@imagepush.db_logger]]

    imagepush.repository.link:
        class: Imagepush\ImagepushBundle\Repository\LinkRepository
        arguments: [@aws.dynamodb]
        calls:
            - [ setLogger, [@imagepush.db_logger]]

    imagepush.repository.counter:
        class: Imagepush\ImagepushBundle\Repository\CounterRepository
        arguments: [@aws.dynamodb]
        calls:
            - [ setLogger, [@imagepush.db_logger]]

    imagepush.repository.processed_hash:
        class: Imagepush\ImagepushBundle\Repository\ProcessedHashRepository
        arguments: [@aws.dynamodb]
        calls:
            - [ setLogger, [@imagepush.db_logger]]

    ##################
    # Robot services #
    ##################

    # Access control
    imagepush.access_control.service:
        class: Imagepush\ImagepushBundle\Services\AccessControl\ServiceAccess
        arguments: [@imagepush.repository.counter, %imagepush.services%]

    # Fetcher
    imagepush.fetcher.reddit:
        class: Imagepush\ImagepushBundle\Services\Fetcher\RedditFetcher
        arguments: [@service_container]

    imagepush.fetcher.content:
        class: Imagepush\ImagepushBundle\Services\Fetcher\ContentFetcher
        arguments: [@service_container]
        calls:
            - [ setLogger, [@imagepush.content_fetcher_logger]]

    # Processor
    imagepush.processor.source:
        class: Imagepush\ImagepushBundle\Services\Processor\ProcessorSource
        arguments: [@service_container]

    imagepush.processor.tag:
        class: Imagepush\ImagepushBundle\Services\Processor\ProcessorTag
        arguments: [@service_container]

    imagepush.processor.update_tag:
        class: Imagepush\ImagepushBundle\Services\Processor\UpdateTag
        arguments: [@service_container]

    imagepush.processor.content:
        class: Imagepush\ImagepushBundle\Services\Processor\Content\Content
        arguments: [@service_container]
        prototype: true

    imagepush.processor.content.html:
        class: Imagepush\ImagepushBundle\Services\Processor\Content\Html
        arguments: [@service_container]
        prototype: true

    # Tag
    imagepush.processor.tag.tag:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\Tag
        arguments: [@service_container]

    imagepush.processor.tag.source:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\SourceTag
        arguments: [@service_container]

    imagepush.processor.tag.stumbleupon:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\StumbleUponTag
        arguments: [@service_container]

    imagepush.processor.tag.twitter:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\TwitterTag
        arguments: [@service_container]

    imagepush.processor.tag.delicious:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\DeliciousTag
        arguments: [@service_container]

    imagepush.processor.tag.reddit:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\RedditTag
        arguments: [@service_container]

    # Publisher
    imagepush.publisher:
        class: Imagepush\ImagepushBundle\Services\Publisher\Publisher
        arguments: [@service_container]

    # Loggers
    imagepush.processor_logger:
        class: Monolog\Logger
        arguments: [processor]
        calls:
            - [pushHandler, [@imagepush.processor_log_handler]]

    imagepush.fetcher_logger:
        class: Monolog\Logger
        arguments: [fetcher]
        calls:
            - [pushHandler, [@imagepush.fetcher_log_handler]]
#            - [pushProcessor, [@log_introspection_processor]]

    imagepush.content_fetcher_logger:
        class: Monolog\Logger
        arguments: [content_fetcher]
        calls:
            - [pushHandler, [@imagepush.content_fetcher_log_handler]]

    imagepush.db_logger:
        class: Monolog\Logger
        arguments: [db]
        calls:
            - [pushHandler, [@imagepush.db_log_handler]]

    imagepush.rabbitmq_logger:
        class: Monolog\Logger
        arguments: [rabbitmq]
        calls:
            - [pushHandler, [@imagepush.rabbitmq_log_handler]]

    imagepush.processor_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/processor_%kernel.environment%.log, 100]

    imagepush.fetcher_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/fetcher_%kernel.environment%.log, 100]

    imagepush.content_fetcher_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/content_fetcher_%kernel.environment%.log, 100]

    imagepush.db_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/db_%kernel.environment%.log, 100]

    imagepush.rabbitmq_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/rabbitmq_%kernel.environment%.log, 100]

    # General log processors
    log_web_processor:
        class: Monolog\Processor\WebProcessor

    log_introspection_processor:
        class: Monolog\Processor\IntrospectionProcessor

    log_memory_usage_processor:
        class: Monolog\Processor\MemoryUsageProcessor

    log_memory_peak_usage_processor:
        class: Monolog\Processor\MemoryPeakUsageProcessor

    # Amazon S3
    imagepush.aws.s3:
        class: Aws\S3\S3Client
        factory: [Aws\S3\S3Client 'factory']
        arguments:
            -
                version: latest
                region: eu-west-1

    #
    imagepush.imagine.controller:
      class: Imagepush\ImagepushBundle\Controller\ImagineController
      arguments: [@liip_imagine.data.manager, @liip_imagine.filter.manager, @liip_imagine.cache.manager, @imagepush.repository.image, @liip_imagine, @logger, %kernel.debug%]

    # Imagine data loader (via Gaufrette with name "images")
    imagepush.imagine.files.data.loader:
        class: Imagepush\ImagepushBundle\Imagine\CustomDataLoader
        arguments: [@liip_imagine, %liip_imagine.formats%, @gaufrette.images_filesystem]
        tags:
            - { name: liip_imagine.data.loader, loader: custom_data_loader }

    # Imagine cache resolver (via Gaufrette with name "images")
    imagepush.imagine.files.cache.resolver:
        class: Imagepush\ImagepushBundle\Imagine\CustomCacheResolver
        arguments: [@service_container, @gaufrette.images_filesystem]
        tags:
            - { name: liip_imagine.cache.resolver, resolver: custom_cache_resolver }

    # Twig
    twig.extension.imagepush:
        class: Imagepush\ImagepushBundle\Templating\ImagepushExtension
        arguments: [@service_container]
        tags:
            - { name: twig.extension }

    twig.extension.sitemap:
        class: Imagepush\SitemapBundle\Twig\Extension\SitemapExtension
        tags:
            - { name: twig.extension }
        arguments: ["%site_url%"]

    twig.extension.debug:
        class: Twig_Extension_Debug
        tags:
            - { name: twig.extension }

    twig.extension.text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }
