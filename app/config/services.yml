services:

    ##################
    # Robot services #
    ##################
    
    # Fetcher
    imagepush.fetcher.digg:
        class: Imagepush\ImagepushBundle\Services\Fetcher\DiggFetcher
        arguments: [@service_container]

    imagepush.fetcher.reddit:
        class: Imagepush\ImagepushBundle\Services\Fetcher\RedditFetcher
        arguments: [@service_container]

    imagepush.fetcher.content:
        class: Imagepush\ImagepushBundle\Services\Fetcher\ContentFetcher
        arguments: [@service_container]

    # Processor
    imagepush.processor:
        class: Imagepush\ImagepushBundle\Services\Processor\Processor
        arguments: [@service_container]

    imagepush.processor.content:
        class: Imagepush\ImagepushBundle\Services\Processor\Content\Content
        arguments: [@service_container]
        prototype: true

    imagepush.processor.content.html:
        class: Imagepush\ImagepushBundle\Services\Processor\Content\Html
        arguments: [@service_container]
        prototype: true

    # Tag
    imagepush.processor.tag:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\Tag
        arguments: [@service_container]

    imagepush.processor.tag.source:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\SourceTag
        arguments: [@service_container]

    imagepush.processor.tag.digg:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\DiggTag
        arguments: [@service_container]

    imagepush.processor.tag.stumbleupon:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\StumbleUponTag
        arguments: [@service_container]

    imagepush.processor.tag.twitter:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\TwitterTag
        arguments: [@service_container]

    imagepush.processor.tag.delicious:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\DeliciousTag
        arguments: [@service_container]

    imagepush.processor.tag.reddit:
        class: Imagepush\ImagepushBundle\Services\Processor\Tag\RedditTag
        arguments: [@service_container]

    # Publisher
    imagepush.publisher:
        class: Imagepush\ImagepushBundle\Services\Publisher\Publisher
        arguments: [@service_container]

    # Varnish
    imagepush.varnish:
        class: Imagepush\ImagepushBundle\Services\Varnish\Varnish
        arguments: [@service_container]

    # Loggers
    imagepush.processor_logger:
        class: Monolog\Logger
        arguments: [processor]
        calls:
            - [pushHandler, [@imagepush.processor_log_handler]]
            - [pushProcessor, [@log_introspection_processor]]
        
    imagepush.fetcher_logger:
        class: Monolog\Logger
        arguments: [fetcher]
        calls:
            - [pushHandler, [@imagepush.fetcher_log_handler]]
            - [pushProcessor, [@log_introspection_processor]]

    imagepush.varnish_logger:
        class: Monolog\Logger
        arguments: [varnish]
        calls:
            - [pushHandler, [@imagepush.varnish_log_handler]]

    imagepush.processor_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/processor_%kernel.environment%.log, 100]

    imagepush.fetcher_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/fetcher_%kernel.environment%.log, 100]

    imagepush.varnish_log_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [%kernel.logs_dir%/varnish_%kernel.environment%.log, 100]
    
    # General log processors
    log_web_processor:
        class: Monolog\Processor\WebProcessor
        
    log_introspection_processor:
        class: Monolog\Processor\IntrospectionProcessor
        
    log_memory_usage_processor:
        class: Monolog\Processor\MemoryUsageProcessor
        
    log_memory_peak_usage_processor:
        class: Monolog\Processor\MemoryPeakUsageProcessor

    # Amazon S3
    imagepush.amazon.s3:
        class: Imagepush\ImagepushBundle\Imagine\ImagepushAmazonS3

    #
    imagepush.imagine.controller:
      class: Imagepush\ImagepushBundle\Controller\ImagineController
      arguments: [@liip_imagine.data.manager, @liip_imagine.filter.manager, @liip_imagine.cache.manager, @doctrine.odm.mongodb.document_manager, @liip_imagine, @logger, %kernel.debug%]
      
    # Imagine data loader (via Gaufrette with name "images")
    imagepush.imagine.files.data.loader:
        class: Imagepush\ImagepushBundle\Imagine\CustomDataLoader
        arguments: [@liip_imagine, %liip_imagine.formats%, @gaufrette.images_filesystem]
        tags:
            - { name: liip_imagine.data.loader, loader: custom_data_loader }
 
    # Imagine cache resolver (via Gaufrette with name "images")
    imagepush.imagine.files.cache.resolver:
        class: Imagepush\ImagepushBundle\Imagine\CustomCacheResolver
        arguments: [@service_container, @gaufrette.images_filesystem]
        tags:
            - { name: liip_imagine.cache.resolver, resolver: custom_cache_resolver }

    # Twig
    twig.extension.imagepush:
        class: Imagepush\ImagepushBundle\Templating\ImagepushExtension
        arguments: [@service_container]
        tags:
            - { name: twig.extension }
    twig.extension.sitemap:
        class: Imagepush\SitemapBundle\Twig\Extension\SitemapExtension
        tags:
            - { name: twig.extension }
        arguments: ["%site_url%"]
    twig.extension.debug:
        class: Twig_Extensions_Extension_Debug
        tags:
            - { name: twig.extension }
    twig.extension.text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }