imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: imagepush.yml }
    - { resource: rabbitmq.yml }
    - { resource: services.yml }

parameters:
    doctrine.dbal.connection.wrapper_class: ~

framework:
    esi:             { enabled: true }
    fragments:       { path: /_fragment }
    translator:      { fallback: en }
    secret:          %secret%
    router:
        strict_requirements: %kernel.debug%
        resource: "%kernel.root_dir%/config/routing.yml"
    default_locale:  en
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:
      engines: ['twig']
      #assets_base_urls:
      #  http: [http://cdn.imagepush.to]
      #assets_version: SomeVersionScheme
    session:
        save_path: ~
#    trust_proxy_headers: true
    trusted_proxies: ['127.0.0.1']

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%

    # Settings to use in templates
    globals:
      site_url: %site_url%
      cdn_images_url: %cdn_images_url%
      bitly_username: %bitly_username%
      bitly_api_key: %bitly_api_key%
      settings:
        show_banners_and_static_helpers: true
        show_comments: true

# Assetic Configuration
assetic:
    #read_from: %kernel.root_dir%/web
    #write_to:  %kernel.root_dir%/web
    debug:          %kernel.debug%
    use_controller: false
    filters:
        cssrewrite: ~
        # closure:
        #     jar: %kernel.root_dir%/java/compiler.jar
        # yui_css:
        #     jar: %kernel.root_dir%/java/yuicompressor-2.4.2.jar

# Doctrine Configuration
doctrine_mongodb:
    connections:
        default:
            server: %mongodb_connection%
            options:
                connect: true
    proxy_dir:            %kernel.cache_dir%/doctrine/odm/mongodb/Proxies
    hydrator_dir:         %kernel.cache_dir%/doctrine/odm/mongodb/Hydrators
    default_database: imagepush_%kernel.environment%
    document_managers:
        default:
            metadata_cache_driver: array # apc
            auto_mapping: true
            mappings:
                StofDoctrineExtensionsBundle: false


# Doctrine Configuration
doctrine:
    dbal:
        default_connection: default
        connections:
            default:
                driver:   pdo_mysql
                host:     %database_host%
                port:     %database_port%
                dbname:   %database_name%
                user:     %database_user%
                password: %database_password%
                charset:  UTF8
                wrapper_class: %doctrine.dbal.connection.wrapper_class%
                mapping_types:
                    enum: string
    orm:
        auto_generate_proxy_classes: %kernel.debug%
        default_entity_manager: default
        entity_managers:
            default:
#                metadata_cache_driver: array
#                query_cache_driver: array
#                result_cache_driver: array
                naming_strategy: doctrine.orm.naming_strategy.underscore
                connection: default
                auto_mapping: false
                mappings:
                    ImagepushBundle: ~
                    DataMigrationBundle: ~
                    StofDoctrineExtensionsBundle: false

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%

stof_doctrine_extensions:
    default_locale: en_US
    translation_fallback: true
    orm:
        default:
          sluggable: true
          softdeleteable: true
          timestampable: true
    mongodb:
        default:
          timestampable: true
          sluggable: true

# Imagine
liip_imagine:
    web_root:     %kernel.root_dir%/../web
    cache_prefix: cache
    #cache:        true
    cache:        custom_cache_resolver
    #loader:       ~
    data_loader:  custom_data_loader
    driver:       imagick
    controller_action: imagepush.imagine.controller:filterAction
    filter_sets:
      out:
        filters:
          thumbnail: { mode: outbound }
      in:
        filters:
          thumbnail: { mode: inset }

# Files storage
knp_gaufrette:
    adapters:
        anton_dev:       # My local mac
            local:
                directory:  /Users/Bob/Sites/imagepush2/web/new_uploads
                create:     true
        prod:         # S3 prod server
            amazon_s3:
                amazon_s3_id: imagepush.amazon.s3
                bucket_name:  %s3_bucket_name%
                create:       true
    filesystems:
        images:
            adapter:    %filesystems_images_adapter%

# Redis
snc_redis:
    clients:
        default:
            type: phpredis
            alias: default
            dsn: redis://%redis_host%:%redis_port%/%redis_default_db%
            logging: %kernel.debug%
            options:
                profile: 2.6
                connection_timeout: 10
                connection_persistent: true
                read_write_timeout: 30
                iterable_multibulk: false
                throw_errors: true
        doctrine:
            type: phpredis
            alias: doctrine
            dsn: redis://%redis_host%:%redis_port%/%redis_doctrine_db%
            logging: %kernel.debug%
            options:
                profile: 2.6
                connection_timeout: 10
                connection_persistent: true
                read_write_timeout: 30
                iterable_multibulk: false
                throw_errors: true
    doctrine:
#        metadata_cache:
#            client: doctrine
#            entity_manager: default
        result_cache:
            client: doctrine
            entity_manager: default
#        query_cache:
#            client: doctrine
#            entity_manager: default

ornicar_apc:
    host: %apc_clear_host%
    web_dir: %kernel.root_dir%/../web

# Not in use (19.7.2012), because purge did not work with Symfony 2.0
#liip_cache_control:
#    rules:
#        # the controls section values are used in a call to Response::setCache();
#        #- { path: ^/test, reverse_proxy_ttl: 30, controls: { public: true, max_age: 10, s_maxage: 20, last_modified: "now" }, vary: [Accept-Encoding, Accept-Language] }
#        #- { path: ^/varnishtest, reverse_proxy_ttl: 30, controls: { public: true, max_age: 10, s_maxage: 20, last_modified: "now" }, vary: [Accept-Encoding, Accept-Language] }
#        # - { path: ^/, reverse_proxy_ttl: 300, controls: { public: true }, vary: [Accept-Encoding, Accept-Language] }
#        - { path: ^/, controls: { public: true } }
#    varnish:
#        domain: %site_url%     # http://imagepush.to
#        ips: 127.0.0.1         # comma separated list of ips, or an array of ips
#        port: 80               # port varnish is listening on for incoming web connections
